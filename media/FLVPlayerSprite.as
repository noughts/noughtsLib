package jp.noughts.media{	import flash.display.*;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.media.Video;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.events.AsyncErrorEvent;	import fl.controls.TextArea;	public class FLVPlayerSprite extends Sprite {		// プロパティ		public var id:uint;		private var _connection:NetConnection;		private var _stream:NetStream;		private var _client:StreamClient;		private var flvPath:String;		public var vw:uint;		public var vh:uint;		private var _video:Video;		private var _playPauseBtn:MovieClip;		private var _stopBtn:MovieClip;		private var _muteBtn:MovieClip;		private var _seekBar:MovieClip;		private var _timeLabel:MovieClip;		private var initialized:Boolean = false;		public var duration:Number = 0;		private var loaded:Number = 0;		private var _percent:Number = 0;		private var completed:Boolean = false;		public var autoPlay:Boolean = true;		public var autoRewind:Boolean = false;		public var autoLoop:Boolean = false;		//		private var debug_txt:TextArea;		// コンストラクタ		public function FLVPlayerSprite(w:uint, h:uint) {			trace( "FLVPlayerSprite const" );			trace(123);			vw = w;			vh = h;			addEventListener( Event.REMOVED_FROM_STAGE, _onRemovedFromStage );			init();		}		// メソッド		private function init():void {			trace( "FLVPlayerSprite INIT" );			_video = new Video(vw, vh);			addChild(_video);			_video.smoothing = true;			_connection = new NetConnection();			_connection.addEventListener(NetStatusEvent.NET_STATUS, ncNetStatus, false, 0, true);			_connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError, false, 0, true);			//_connection.connect(null);		}		private function _onRemovedFromStage( e:Event ):void{			trace( "FLVPlayerSprite _onRemovedFromStage" );			_video.attachNetStream( null );			_connection.removeEventListener( NetStatusEvent.NET_STATUS, ncNetStatus );			_connection.removeEventListener( SecurityErrorEvent.SECURITY_ERROR, securityError );			_stream.removeEventListener( NetStatusEvent.NET_STATUS, nsNetStatus );			_stream.removeEventListener( AsyncErrorEvent.ASYNC_ERROR, asyncError );		}		public function set playPauseBtn(btn:MovieClip):void {			_playPauseBtn = btn;			_playPauseBtn.addEventListener(MouseEvent.CLICK, playPause, false, 0, true);			_playPauseBtn.enabled = false;		}		public function set stopBtn(btn:MovieClip):void {			_stopBtn = btn;			_stopBtn.addEventListener(MouseEvent.CLICK, stop, false, 0, true);			_stopBtn.enabled = false;		}		public function set muteBtn(btn:MovieClip):void {			_muteBtn = btn;			_muteBtn.enabled = true;		}		public function set seekBar(bar:MovieClip):void {			_seekBar = bar;			_seekBar.addEventListener("press", press, false, 0, true);			_seekBar.addEventListener("drag", drag, false, 0, true);			_seekBar.addEventListener("release", release, false, 0, true);			_seekBar.enabled = false;		}		public function set timeLabel(label:MovieClip):void {			_timeLabel = label;		}		public function set source(path:String):void {			flvPath = path;			_connection.connect(null);			debug_trace("ver 0.301\n");		}		/////////////////////////////////////////////		//接続		/////////////////////////////////////////////		private function ncNetStatus(evt:NetStatusEvent):void {			switch (evt.info.code) {				case "NetConnection.Connect.Success" :	//接続成功					initialize();					break;				case "NetConnection.Connect.Failed" :		//接続失敗					break;				case "NetConnection.Connect.Rejected" :	//接続拒否					break;				case "NetConnection.Connect.Closed" :		//接続(正常)切断					break;			}		}		private function securityError(evt:SecurityErrorEvent):void {			trace(evt.text);		}		/////////////////////////////////////////////		//初期化		/////////////////////////////////////////////		private function initialize():void {			_client = new StreamClient();			//_client.onMetaData = onMetaData;			_client.addEventListener(Event.INIT, onMetaData, false, 0, true);			_stream = new NetStream(_connection);			_stream.bufferTime = 5;			_stream.addEventListener(NetStatusEvent.NET_STATUS, nsNetStatus, false, 0, true);			_stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncError, false, 0, true);			_stream.client = _client;			_video.attachNetStream(_stream);			load();		}		/////////////////////////////////////////////		//メタデータ		/////////////////////////////////////////////		private function onMetaData(evt:Event):void {			debug_trace("onMetaData: " + evt.target.duration);			//FLV総時間の取得			duration = evt.target.duration;			dispatchEvent( new Event("onMetaData") );			setup();		}		/////////////////////////////////////////////		//読み込み		/////////////////////////////////////////////		private function load():void {			_stream.play(flvPath);			_stream.pause();			addEventListener(Event.ENTER_FRAME, progress, false, 0, true);		}		private function progress(evt:Event):void {			loaded = _stream.bytesLoaded/_stream.bytesTotal;			if( _seekBar ){				_seekBar.progress = loaded;			}			if (loaded >= 1) {				removeEventListener(Event.ENTER_FRAME, progress);			}		}		/////////////////////////////////////////////		//ストリーム		/////////////////////////////////////////////		private function nsNetStatus(evt:NetStatusEvent):void {			debug_trace("nsNetStatus: " + evt.info.code);			switch (evt.info.code) {				case "NetStream.Buffer.Full" :			//バッファ充足(再生開始)					break;				case "NetStream.Buffer.Flush" :		//バッファ空(再生終了)					break;				case "NetStream.Buffer.Empty" :		//バッファ不足(再生中断)					break;				case "NetStream.Play.Start" :			//再生開始					setup();					break;				case "NetStream.Play.Stop" :			//再生完了					complete();					break;				case "NetStream.Play.StreamNotFound" :	//FLVが見つからない					break;				case "NetStream.Pause.Notify" :		//再生一時停止					break;				case "NetStream.Seek.Notify" :		//シーク完了通知					debug_trace("seeked: " + percent);					if( _seekBar ){						debug_trace("seeked: " + _seekBar.percent);					}					debug_trace("seeked: " + _stream.time/duration);					break;				case "NetStream.Seek.InvalidTime" :	//未ダウンロード時間へのシーク					break;			}		}		private function asyncError(evt:AsyncErrorEvent):void {			trace(evt.text);		}		/////////////////////////////////////////////		//設定		/////////////////////////////////////////////		private function setup():void {			if (duration > 0) {				if (!initialized) {					if( _muteBtn ){						_muteBtn.setup(_stream);					}					if( _timeLabel ){						_timeLabel.initialize(duration);					}					initialized = true;					dispatchEvent(new Event(Event.INIT));				}			}		}		public function start():void {			debug_trace("start "+ flvPath  );			if( _playPauseBtn ){				_playPauseBtn.enabled = true;			}			if( _seekBar ){				_seekBar.enabled = true;			}			stop();			if (autoPlay) play();		}		/////////////////////////////////////////////		//再生・一時停止		/////////////////////////////////////////////		private function playPause(evt:MouseEvent):void {			if (!_playPauseBtn.playing) {				play();			} else {				pause();			}		}		/////////////////////////////////////////////		//再生		/////////////////////////////////////////////		public function play():void {			debug_trace("play");			if( _playPauseBtn ){				_playPauseBtn.playing = true;			}			if( _stopBtn ){				_stopBtn.enabled = true;			}			if (completed) rewind();			_stream.resume();			addEventListener(Event.ENTER_FRAME, update, false, 0, true);		}		/////////////////////////////////////////////		//一時停止		/////////////////////////////////////////////		public function pause():void {			debug_trace("pause");			removeEventListener(Event.ENTER_FRAME, update);			if( _playPauseBtn ){				_playPauseBtn.playing = false;			}			if( _stopBtn ){				_stopBtn.enabled = true;			}			if( _stream ){				_stream.pause();			}		}		/////////////////////////////////////////////		//停止 (巻き戻し)		/////////////////////////////////////////////		public function stop(evt:MouseEvent = null):void {			debug_trace("stop");			removeEventListener(Event.ENTER_FRAME, update);			if( _playPauseBtn ){				_playPauseBtn.playing = false;			}			if( _stopBtn ){				_stopBtn.enabled = false;			}			_stream.pause();			rewind();		}		/////////////////////////////////////////////		//再生完了		/////////////////////////////////////////////		private function complete():void {			debug_trace("complete");			dispatchEvent( new Event(Event.COMPLETE) );			removeEventListener(Event.ENTER_FRAME, update);			if (!autoLoop) {				if( _playPauseBtn ){					_playPauseBtn.playing = false;				}				if( _stopBtn ){					_stopBtn.enabled = false;				}				percent = 1;			} else {				rewind();				play();			}		}		/////////////////////////////////////////////		//シーク		/////////////////////////////////////////////		private function seek(p:Number):void {			debug_trace("seek: " + p);			debug_trace("seek: " + loaded);			//debug_trace("seek: " + Math.min(p, Math.max(loaded - 0.01, 0)));			//p = Math.min(p, Math.max(loaded - 0.01, 0));			p = Math.min(p, Math.max(loaded - 0.01, 0));			_stream.seek(duration*p);			percent = p;		}		/////////////////////////////////////////////		//巻き戻し		/////////////////////////////////////////////		private function rewind():void {			debug_trace("rewind");			_stream.pause();			seek(0);		}		/////////////////////////////////////////////		//シークバー		/////////////////////////////////////////////		private function update(evt:Event):void {			percent = _stream.time/duration;		}		private function press(evt:Event):void {			removeEventListener(Event.ENTER_FRAME, update);			_stream.pause();		}		private function drag(evt:Event):void {			percent = _seekBar.percent;		}		private function release(evt:Event):void {			seek(percent = _seekBar.percent);			if (_playPauseBtn.playing) {				play();			} else {				pause();			}		}		private function get percent():Number {			return _percent;		}		private function set percent(param:Number):void {			_percent = param;			if (_percent >= 1) {				_percent = 1;				completed = true;			} else {				completed = false;			}			if( _seekBar ){				_seekBar.percent = _percent;			}			if( _timeLabel ){				_timeLabel.setup(duration*_percent);			}		}		/////////////////////////////////////////////		//デバッグ		/////////////////////////////////////////////		public function set debug(txt:TextArea):void {			debug_txt = txt;		}		private function debug_trace(str:String):void {			trace( str );		}	}}	import flash.events.EventDispatcher;	import flash.events.Event;	class StreamClient extends EventDispatcher {		// プロパティ		public var duration:Number;		// コンストラクタ		public function StreamClient() {		}		// メソッド		public function onMetaData(info:Object):void {			duration = info.duration;			dispatchEvent(new Event(Event.INIT));		}	}